*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="sfcombotree.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS sfcombotree AS sfcontainer OF "sfctrls.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboCombo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpTreeView" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: closecontrol		&& Closes the control
		*m: itemselected		&& Called when an item is selected and the control closed
		*m: loadexpandednode		&& Loads the specified node as it's expanded
		*m: loadtree		&& Loads the TreeView
		*m: opencontrol		&& Opens the control
		*p: cloadingnodetext		&& The text for a "loading" child node
		*p: fontname		&& The font name
		*p: fontsize		&& The font size
		*p: lchanged		&& .T. if the user selected a different value
		*p: lcloseonclick		&& .T. to close the control when an item in the TreeView is clicked
		*p: lcloseondblclick		&& .T. to close the control when an item in the TreeView is double-clicked
		*p: lcombotreeopen		&& .T. if the TreeView is displayed
		*p: linitialized		&& .T. if the control has been initialized
		*p: lloadoninit		&& .T. to load the TreeView from Init
		*p: lmovetoback		&& .T. to set the ZOrder of the control to the back when it's closed
		*p: lnoclose		&& .T. to not have LostFocus close the control
		*p: nfired		&& When cboCombo.DropDown last fired so we can handle multiple firing
		*p: nforminitialheight		&& The form's initial height
		*p: nmousebutton		&& The last mouse button pressed by the user
		*p: noriginalheight		&& The original height of the control
		*a: aparentheights[1,0]		&& An array containing heights of parent containers before opening the control
	*</DefinedPropArrayMethod>

	Anchor = 10
	cloadingnodetext = Loading...		&& The text for a "loading" child node
	fontname = Segoe UI		&& The font name
	fontsize = 9		&& The font size
	Height = 24
	lchanged = .F.		&& .T. if the user selected a different value
	lcloseondblclick = .F.		&& .T. to close the control when an item in the TreeView is double-clicked
	lcombotreeopen = .F.		&& .T. if the TreeView is displayed
	lloadoninit = .T.		&& .T. to load the TreeView from Init
	lmovetoback = .T.		&& .T. to set the ZOrder of the control to the back when it's closed
	lnoclose = .F.		&& .T. to not have LostFocus close the control
	Name = "sfcombotree"
	nfired = 0		&& When cboCombo.DropDown last fired so we can handle multiple firing
	nforminitialheight = 0		&& The form's initial height
	nmousebutton = 0		&& The last mouse button pressed by the user
	noriginalheight = 227		&& The original height of the control
	Width = 170
	_memberdata = <VFPData>
		<memberdata name="about" type="method" display="About"/>
		<memberdata name="builder" type="property" display="Builder"/>
		<memberdata name="calledfromthisclass" type="method" display="CalledFromThisClass"/>
		<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
		<memberdata name="luseformshortcutmenu" type="property" display="lUseFormShortcutMenu" favorites="True"/>
		<memberdata name="oexception" type="property" display="oException"/>
		<memberdata name="ohook" type="property" display="oHook"/>
		<memberdata name="omenu" type="property" display="oMenu"/>
		<memberdata name="release" type="method" display="Release"/>
		<memberdata name="shortcutmenu" type="method" display="ShortcutMenu" favorites="True"/>
		<memberdata name="showmenu" type="method" display="ShowMenu"/>
		<memberdata name="lsaveanchor" type="property" display="lSaveAnchor"/>
		<memberdata name="lsaveanchor_assign" type="property" display="lSaveAnchor_Assign"/>
		<memberdata name="nsavedanchor" type="property" display="nSavedAnchor"/>
		<memberdata name="noriginalheight" type="property" display="nOriginalHeight"/>
		<memberdata name="closecontrol" type="method" display="CloseControl"/>
		<memberdata name="opencontrol" type="method" display="OpenControl"/>
		<memberdata name="loadtree" type="method" display="LoadTree"/>
		<memberdata name="lcombotreeopen" type="property" display="lComboTreeOpen"/>
		<memberdata name="aparentheights" type="property" display="aParentHeights"/>
		<memberdata name="nfired" type="property" display="nFired"/>
		<memberdata name="lcloseondblclick" type="property" display="lCloseOnDblClick"/>
		<memberdata name="lmovetoback" type="property" display="lMoveToBack"/>
		<memberdata name="lloadoninit" type="property" display="lLoadOnInit"/>
		<memberdata name="lchanged" type="property" display="lChanged"/>
		<memberdata name="loadexpandednode" type="method" display="LoadExpandedNode"/>
		<memberdata name="lnoclose" type="property" display="lNoClose"/>
		<memberdata name="nmousebutton" type="property" display="nMouseButton"/>
		<memberdata name="lcloseonclick" type="property" display="lCloseOnClick"/>
		<memberdata name="linitialized" display="lInitialized"/>
		<memberdata name="itemselected" display="ItemSelected"/>
		<memberdata name="nforminitialheight" display="nFormInitialHeight"/>
		<memberdata name="cloadingnodetext" display="cLoadingNodeText"/>
		<memberdata name="fontname" display="FontName"/>
		<memberdata name="fontsize" display="FontSize"/>
		</VFPData>

	ADD OBJECT 'cboCombo' AS sfcombobox WITH ;
		Anchor = 10, ;
		Height = 24, ;
		Left = 0, ;
		Name = "cboCombo", ;
		Top = 0, ;
		Value = , ;
		Width = 168
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="combobox" />

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Height = 174, ;
		Left = 5, ;
		Name = "oTree", ;
		Top = 29, ;
		Width = 166
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCF/KXSZNkBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACcBAAAAAAAACAAAAAIAAAD+////BAAAAAUAAAAGAAAABwAAAP7///8JAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAAAoEQAA/BEAALE8wWoBAAYAIgAAAD0AAAAJAQAADAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAKNsAAAAAAADg2wAAAAAAAIjcAAAAAAAAkNIAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAkQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcDAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABBcHBlYXJhbmNlAAkAAABJCgAAAAAAAAAMAAAASG90VHJhY2tpbmcABQAAAEwBAAAAAF4PAQAAAAAAnA4BAAAAAADkEAEAAAAAAAAABQAIAAAAAgBjAAAAAAAFAACAQOkZAAEAAABcAB/e7L0BAAUAiekZAANS4wuRj84RneMAqgBLuFEBAAAAkAGQXwEABlRhaG9t

	ADD OBJECT 'shpTreeView' AS sfshape WITH ;
		Height = 176, ;
		Left = 0, ;
		Name = "shpTreeView", ;
		SpecialEffect = 1, ;
		Top = 25, ;
		Width = 168
		*< END OBJECT: ClassLib="sfctrls.vcx" BaseClass="shape" />
	
	PROCEDURE about
		*==============================================================================
		* Class:						SFComboTree
		* Based On:						SFContainer
		* Purpose:						Combo box with TreeView for hierarchical data
		*									or multi-select with checkboxes
		* Author:						Doug Hennig
		* Copyright:					(c) 1996-2019 Stonefield Software Inc.
		* Last revision:				03/07/2019
		* Include file:					none
		* Note:							see https://doughennig.com/Papers/Pub/200909dhen.pdf
		*									for documentation
		*
		* Changes in "Based On" class properties:
		*	Anchor:						10
		*	Height:						24
		*	Width:						170
		*
		* Changes in "Based On" class methods:
		*	Init:						sets up the control
		*	LostFocus:					close the control when we lose focus
		*
		* Custom public properties added:
		*	aParentHeights[1]:			an array containing heights of parent containers
		*								before opening the control
		*	cLoadingNodeText:			the text for a "loading" child node
		*	FontName:					the font name
		*	FontSize:					the font size
		*	lChanged:					.T. if the user selected a different value
		*	lCloseOnClick:				.T. to close the control when an item in the
		*								TreeView is clicked
		*	lCloseOnDblClick:			.T. to close the control when an item in the
		*								TreeView is double-clicked
		*	lComboTreeOpen:				.T. if the TreeView is displayed
		*	lInitialized:				.T. if the control has been initialized
		*	lLoadOnInit:				.T. to load the TreeView from Init
		*	lMoveToBack:				.T. to set the ZOrder of the control to the
		*								back when it's closed
		*	lNoClose:					.T. to not have LostFocus close the control
		*	nFired:						when cboCombo.DropDown last fired so we can
		*								handle multiple firing
		*	nFormInitialHeight:			the form's initial height
		*	nMouseButton:				the last mouse button pressed by the user
		*	nOriginalHeight:			the original height of the control
		*
		* Custom protected properties added:
		*	none
		*
		* Custom public methods added:
		*	CloseControl:				closes the control
		*	ItemSelected:				called when an item is selected and the control
		*								closed
		*	LoadExpandedNode:			loads the specified node as it's expanded
		*	LoadTree:					loads the TreeView
		*	OpenControl:				opens the control
		*
		* Custom protected methods added:
		*	none
		*==============================================================================
		
	ENDPROC

	PROCEDURE closecontrol		&& Closes the control
		lparameters tlKeepFocus, ;
			tlSelected, ;
			tlDontCallItemSelected
		local lnCurrAnchor, ;
			loParent, ;
			lnParent, ;
			lnParents, ;
			lnAnchor
		with This
		
		* Turn off anchoring since we're changing our Height.
		
			lnCurrAnchor = .nSavedAnchor
			.lSaveAnchor = .T.
			.SetAll('lSaveAnchor', .T.)
			.oTree.Anchor = 0
		
		* Adjust the properties of the control.
		
			.Height              = .cboCombo.Height
			.oTree.Visible       = .F.
			.shpTreeView.Visible = .F.
			.lComboTreeOpen      = .F.
		
		* Restore the height and anchor of any parent containers we adjusted in
		* OpenControl or resized while we were open and the form was resized. Note that
		* if the parent doesn't support vertical resizing, we'll restore Height to its
		* original value. Otherwise, we'll account for any difference in the form
		* height made while we were open.
		
			loParent  = .Parent
			lnParent  = 1
			lnParents = alen(.aParentHeights, 1)
			do while vartype(loParent) = 'O' and lnParents > lnParent
				if inlist(lower(loParent.BaseClass), 'container', 'pageframe')
					lnParent = lnParent + 1
					if vartype(.aParentHeights[lnParent, 1]) = 'N'
						llSaveAnchor = pemstatus(loParent, 'lSaveAnchor', 5)
						if llSaveAnchor
							loParent.lSaveAnchor = .T.
							loParent.SetAll('lSaveAnchor', .T.)
						endif llSaveAnchor
						lnAnchor = .aParentHeights[lnParent, 3]
						if not bittest(lnAnchor, 0) and not bittest(lnAnchor, 2)
							loParent.Height = .aParentHeights[lnParent, 1]
						else
							loParent.Height = .aParentHeights[lnParent, 1] + ;
								loParent.Height - .aParentHeights[lnParent, 2]
						endif not bittest(lnAnchor, 0) ...
						if llSaveAnchor
							loParent.lSaveAnchor = .F.
							loParent.SetAll('lSaveAnchor', .F.)
						endif llSaveAnchor
						loParent.Anchor = lnAnchor
					endif vartype(.aParentHeights[lnParent, 1]) = 'N'
				endif inlist(lower(loParent.BaseClass) ...
				loParent = loParent.Parent
			enddo while vartype(loParent) = 'O' ...
		
		* Restore anchoring and ensure we're at the back of ZOrder.
		
			.SetAll('lSaveAnchor', .F.)
			.shpTreeView.Anchor = 0
			.Anchor             = lnCurrAnchor
			if .lMoveToBack
				.shpTreeView.ZOrder(1)
				.oTree.ZOrder(1)
				.ZOrder(1)
			endif .lMoveToBack
		
		* Set focus to the combobox if we're supposed to.
		
			if tlKeepFocus
				.cboCombo.SetFocus()
			endif tlKeepFocus
		
		* Ensure the combobox matches the selected item.
		
			if tlSelected and vartype(.oTree.SelectedItem) = 'O'
				if not .oTree.SelectedItem.Text == .cboCombo.Value
					.lChanged = .T.
				endif not .oTree.SelectedItem.Text == .cboCombo.Value
				store .oTree.SelectedItem.Text to .cboCombo.Value, ;
					.cboCombo.DisplayValue
		
		* Call ItemSelected to do any custom behavior.
		
				if not tlDontCallItemSelected
					.ItemSelected()
				endif not tlDontCallItemSelected
			endif tlSelected ...
		endwith
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		with This
			.cboCombo.Anchor      = 0
			.cboCombo.Width       = .Width
			.cboCombo.Anchor      = .Anchor	
			.cboCombo.ToolTipText = .ToolTipText
			dimension .aParentHeights[1, 2]
			.aParentHeights[1, 1] = .Height
			.aParentHeights[1, 2] = .Height
			.nFormInitialHeight   = Thisform.Height
			.nSavedAnchor = .Anchor
		
		* Set the font.
		
			store .FontName to .oTree.Font.Name, .cboCombo.FontName
			store .FontSize to .oTree.Font.Size, .cboCombo.FontSize
		
			.CloseControl()
			if .lLoadOnInit
				.LoadTree()
			endif .lLoadOnInit
			.lInitialized = .T.
		endwith
		
	ENDPROC

	PROCEDURE itemselected		&& Called when an item is selected and the control closed
		* Abstract method
		
	ENDPROC

	PROCEDURE loadexpandednode		&& Loads the specified node as it's expanded
		* Abstract method
		
		lparameters toNode
		
	ENDPROC

	PROCEDURE loadtree		&& Loads the TreeView
		* Abstract method
		
	ENDPROC

	PROCEDURE LostFocus
		* Close the control when we lose focus, although we'll do nothing if we were
		* called from CloseControl (since that may be a recursive call) or if lNoClose
		* is .T., since that means we temporarily lost focus because of kludge code in
		* cboCombo.DropDown.
		
		local laStack[1], ;
			lnStack, ;
			lnI, ;
			llClose
		if not This.lNoClose
			lnStack = astackinfo(laStack)
			for lnI = lnStack to 1 step -1
				if 'closecontrol' $ laStack[lnI, 3]
					llClose = .T.
					exit
				endif 'closecontrol' $ laStack[lnI, 3]
			next lnI
			if This.lComboTreeOpen and not llClose
				This.CloseControl(.F., .T.)
			endif This.lComboTreeOpen ...
		endif not This.lNoClose
		
	ENDPROC

	PROCEDURE opencontrol		&& Opens the control
		local loParent, ;
			lnParent, ;
			lnHeight, ;
			llSaveAnchor, ;
			lnI, ;
			loNode
		with This
		
		* Turn off anchoring since we'll be resizing and moving controls.
		
			.lSaveAnchor = .T.
			.SetAll('lSaveAnchor', .T.)
			.oTree.Anchor = 0
		
		* Save our height, then set it to the desired height, accounting for any resize
		* of the form.
		
			.aParentHeights[1, 1] = .Height
			.Height               = min(.nOriginalHeight + Thisform.Height - ;
				.nFormInitialHeight, Thisform.Height - objtoclient(This, 1) - 5)
			.aParentHeights[1, 2] = .Height
		
		* Save the height of all parent containers and adjust them if necessary. Also,
		* save the current anchor values and add 5 if necessary so they resize
		* vertically.
		
			loParent = This.Parent
			lnParent = 1
			lnHeight = .Top + .Height
			do while vartype(loParent) = 'O'
				if inlist(lower(loParent.BaseClass), 'container', 'pageframe')
					llSaveAnchor = pemstatus(loParent, 'lSaveAnchor', 5)
					lnParent     = lnParent + 1
					dimension .aParentHeights[lnParent, 3]
					if loParent.Height < lnHeight
						.aParentHeights[lnParent, 3] = loParent.Anchor
						if llSaveAnchor
							loParent.lSaveAnchor = .T.
							loParent.SetAll('lSaveAnchor', .T.)
						endif llSaveAnchor
						.aParentHeights[lnParent, 1] = loParent.Height
						loParent.Height              = lnHeight
						.aParentHeights[lnParent, 2] = loParent.Height
						if llSaveAnchor
							loParent.lSaveAnchor = .F.
							loParent.SetAll('lSaveAnchor', .F.)
						endif llSaveAnchor
						loParent.Anchor = bitor(loParent.Anchor, 5)
					endif loParent.Height < lnHeight
				endif inlist(lower(loParent.BaseClass) ...
				if lnParent = 2
					lnHeight = objtoclient(This, 1) + .Height
				endif lnParent = 2
				try
					loParent = loParent.Parent
				catch
					loParent = .NULL.
				endtry
			enddo while vartype(loParent) = 'O'
		
		* Adjust the size of the TreeView and shape in case the container was resized
		* while we were closed.
		
			.oTree.Width        = .Width - 2
			.oTree.Height       = .Height - .cboCombo.Height - 4
			.oTree.Left         = .shpTreeView.Left + 1
			.oTree.Top          = .shpTreeView.Top + 1
			.shpTreeView.Width  = .Width
			.shpTreeView.Height = .Height - .cboCombo.Height - 2
		
		* If the current value doesn't match the selected item in the TreeView, find
		* and select the appropriate item.
		
			if vartype(.oTree.SelectedItem) <> 'O' or ;
				(not empty(.cboCombo.DisplayValue) and ;
				not .cboCombo.DisplayValue == .oTree.SelectedItem.Text)
				for lnI = 1 to .oTree.Nodes.Count
					loNode = .oTree.Nodes.Item(lnI)
					if .cboCombo.DisplayValue == loNode.Text
						loNode.Selected = .T.
						loNode.EnsureVisible()
						exit
					endif .cboCombo.DisplayValue == loNode.Text
				next lnI
			endif vartype(.oTree.SelectedItem) <> 'O' ...
		
		* Enabled the controls appropriately, then set focus to the TreeView.
		
			.oTree.Visible  = .T.
			.shpTreeView.Visible = .T.
			.ZOrder(0)
			.shpTreeView.ZOrder(0)
			.oTree.ZOrder(0)
			.lComboTreeOpen = .T.
			.oTree.SetFocus()
		
		* Restore anchoring and add 5 to it so we resize vertically.
		
			.lSaveAnchor = .F.
			.SetAll('lSaveAnchor', .F.)
			store bitor(.Anchor, 5) to .Anchor, .oTree.Anchor, .shpTreeView.Anchor
		endwith
		
	ENDPROC

	PROCEDURE cboCombo.DropDown
		local lnCol, ;
			lnRow
		
		* Prevent the usual behavior.
		
		nodefault
		with This.Parent
			do case
		
		* If the control isn't open, open it.
		
				case not .lComboTreeOpen
					.OpenControl()
		
		* If the control is open and we weren't just fired, close the control.
		* Otherwise, click to the right of the control then move the mouse back. This
		* avoids a weird behavior: if you open and close the control, then open it
		* again using the mouse, DropDown fires continously as long as the mouse is
		* over the control. So, we move the move off the control, click, and move it
		* back to the original spot to stop this.
		
				case seconds() > .nFired + 0.25
					.CloseControl(.T., .T.)
				otherwise
					.lNoClose = .T.
					lnCol     = mcol(Thisform.Name, 3)
					lnRow     = mrow(Thisform.Name, 3)
					mouse click at lnRow, objtoclient(This.Parent, 2) + .Width + 5 pixels ;
						window (Thisform.Name)
					doevents force
					mouse at lnRow, lnCol pixels window (Thisform.Name)
					doevents force
					.lNoClose = .F.
					.oTree.SetFocus()
			endcase
			.nFired = seconds()
		endwith
		
	ENDPROC

	PROCEDURE oTree.DblClick
		* Close the control if we're supposed to.
		
		if This.Parent.lCloseOnDblClick
			This.Parent.CloseControl(.F., .T.)
		endif This.Parent.lCloseOnDblClick
		
	ENDPROC

	PROCEDURE oTree.Expand
		lparameters toNode
		if toNode.Children > 0 and toNode.Child.Text = This.cLoadingNodeText
			This.Parent.LoadExpandedNode(toNode)
		endif toNode.Children > 0 ...
		
	ENDPROC

	PROCEDURE oTree.KeyDown
		lparameters tnKeyCode, ;
			tnShift
		do case
			case tnKeyCode = 27
				This.Parent.CloseControl(.F., .T.)
		endcase
		
	ENDPROC

	PROCEDURE oTree.MouseDown
		lparameters tnButton, ;
			tnShift, ;
			tnX, ;
			tnY
		This.Parent.nMouseButton = tnButton
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		* Close the control if we're supposed to.
		
		lparameters toNode
		if This.Parent.lCloseOnClick and This.Parent.nMouseButton = 1
			This.Parent.CloseControl(.F., .T.)
		endif This.Parent.lCloseOnClick ...
		
	ENDPROC

ENDDEFINE
